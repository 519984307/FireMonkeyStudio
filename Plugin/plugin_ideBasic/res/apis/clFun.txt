iscntrl?2(int c) int  //判断字符c是否为控制字符。
isalnum?2(int c) int  //判断字符c是否为字母或数字
isalpha?2(int c) int  //判断字符c是否为英文字母
isascii?2(int c) int  //判断字符c是否为ascii码
isblank?2(int c) int  //判断字符c是否为TAB或空格
isdigit?2(int c) int  //判断字符c是否为数字
isgraph?2(int c) int  //判断字符c是否为除空格外的可打印字符
islower?2(int c) int  //判断字符c是否为小写英文字母
isprint?2(int c) int  //判断字符c是否为可打印字符（含空格）
ispunct?2(int c) int  //判断字符c是否为标点符号
isspace?2(int c) int  //判断字符c是否为空白符
isupper?2(int c) int  //判断字符c是否为大写英文字母
isxdigit?2(int c) int  //判断字符c是否为十六进制数字
toascii?2(int c) int  //将字符c转换为ascii码
tolower?2(int c) int  //将字符c转换为小写英文字母
toupper?2(int c); int  //将字符c转换为大写英文字母
fabs?2(float x) float  //求浮点数x的绝对值
abs?2(int x) int  //求整数x的绝对值
acos?2(float x) float  //求x（弧度表示）的反余弦值
asin?2(float x) float  //求x（弧度表示）的反正弦值
atan?2(float x) float  //求x（弧度表示）的反正切值
atan2?2(float y, float x) float  //求y/x（弧度表示）的反正切值
ceil?2(float x) float  //求不小于x的最小整数
cos?2(float x) float  //求x（弧度表示）的余弦值
cosh?2(float x) float  //求x的双曲余弦值
exp?2(float x) float  //求e的x次幂
floor?2(float x) float  //求不大于x的最大整数
fmod?2(float x, float y) float  //计算x/y的余数
frexp?2(float x, int* exp) float  //把浮点数x分解成尾数和指数
ldexp?2(float x, int exp) float  //返回x*2^exp的值
modf?2(float num, float* i) float  //将浮点数num分解成整数部分和小数部分
hypot?2(float x, float y) float  //对于给定的直角三角形的两个直角边，求其斜边的长度
log?2(float x) float  //计算x的自然对数
log10?2(float x) float  //计算x的常用对数
pow?2(float x, float y) float  //计算x的y次幂
pow10?2(float x) float  //计算10的x次幂
sin?2(float x) float  //计算x（弧度表示）的正弦值
sinh?2(float x) float  //计算x（弧度表示）的双曲正弦值
sqrt?2(float x) float  //计算x的平方根
tan?2(float x); float  //计算x（弧度表示）的正切值
tanh?2(float x) float  //求x的双曲正切值
printf?2(char* format...) int  //产生格式化输出的函数
getchar?2(void) int  //从键盘上读取一个键，并返回该键的键值
putchar?2(char c) int  //在屏幕上显示字符c
fopen?2(char* filename, char* type) FILE*  //打开一个文件
freopen?2(char* filename, char* type,FILE* fp) FILE*  //打开一个文件，并将该文件关联到fp指定的流
fflush?2(FILE* stream) int  //清除一个流
fclose?2(FILE* stream) int  //关闭一个文件
remove?2(char* filename) int  //删除一个文件
rename?2(char* oldname, char* newname) int  //重命名文件
tmpfile?2(void) FILE*  //以二进制方式打开暂存文件
tmpnam?2(char* sptr) char*  //创建一个唯一的文件名
setvbuf?2(FILE* stream, char* buf, int type, unsigned size) int  //把缓冲区与流相关
fprintf?2(FILE* stream, char* format[, argument,...]) int  //传送格式化输出到一个流中
scanf?2(char* format[,argument,...]) int  //执行格式化输入
fscanf?2(FILE* stream, char* format[,argument...]) int  //从一个流中执行格式化输入
fgetc?2(FILE* stream) int  //从流中读取字符
fgets?2(char* string, int n, FILE* stream) char*  //从流中读取一字符串
fputc?2(int ch, FILE* stream) int  //送一个字符到一个流中
fputs?2(char* string, FILE* stream) int  //送一个字符到一个流中
getc?2(FILE* stream) int  //从流中取字符
getchar?2(void) int  //从 stdin 流中读字符
gets?2(char* string) char*  //从流中取一字符串
putchar?2(int ch) int  //在 stdout 上输出字符
puts?2(char* string) int  //送一字符串到流中
ungetc?2(char c, FILE* stream) int  //把一个字符退回到输入流中
fread?2(void* ptr, int size, int nitems, FILE* stream) int  //从一个流中读数据
fwrite?2(void* ptr, int size, int nitems, FILE* stream) int  //写内容到流中
fseek?2(stream, long offset, int fromwhere) ?2(FILE*  //重定位流上的文件指针
ftell?2(FILE* stream) long  //返回当前文件指针
rewind?2(FILE* stream) int  //将文件指针重新指向一个流的开头
fgetpos?2(FILE* stream) int  //取得当前文件的句柄
fsetpos?2(FILE* stream, const fpos_t* pos) int  //定位流上的文件指针
clearerr?2(FILE* stream) void  //复位错误标志
feof?2(FILE* stream) int  //检测流上的文件结束符
ferror?2(FILE* stream) int  //检测流上的错误
perror?2(char* string) void  //系统错误信息
itoa?2(int i) char*  //把整数i转换成字符串
exit?2(int retval) void  //结束程序
atof?2(const char* s) double  //将字符串s转换为double类型
atoi?2(const char* s) int  //将字符串s转换为int类型
atol?2(const char* s) long  //将字符串s转换为long类型
strtod ?2(const char*s,char* *endp) double  //将字符串s前缀转换为double型
strtol?2(const char*s,char* *endp,int base) long  //将字符串s前缀转换为long型
long strtol?2(const char*s,char* *endp,int base) unsinged  //将字符串s前缀转换为 unsinged long型
rand?2(void) int  //产生一个0~RAND_MAX之间的伪随机数
srand?2(unsigned int seed) void  //初始化随机数发生器
calloc?2(size_t nelem, size_t elsize) void*  //分配主存储器
malloc?2(unsigned size) void*  //内存分配函数
realloc?2(void* ptr, unsigned newsize) void*  //重新分配主存
free?2(void* ptr) void  //释放已分配的块
abort?2(void) void  //异常终止一个进程
exit?2(int status) void  //终止应用程序
atexit?2(atexit_t func) int  //注册终止函数
getenv?2(char* envvar) char*  //从环境中取字符串
bsearch?2(const void* key, const void* base, size_t* nelem, size_t width, int(*fcmp)(const void* , const* )) void*  //二分法搜索函数
qsort?2(void* base, int nelem, int width, int (*fcmp)()) void  //使用快速排序例程进行排序
abs?2(int i) int  //求整数的绝对值
labs?2(long n) long  //取长整型绝对值
div?2(int number, int denom) div_t  //将两个整数相除 , 返回商和余数
ldiv?2(long lnumer, long ldenom) ldiv_t  //两个长整型数相除 , 返回商和余数
clock?2(void) clock_t  //确定处理器时间函数
time?2(time_t* tp) time_t  //返回当前日历时间
difftime?2(time_t time2, time_t time1) double  //计算两个时刻之间的时间差
mktime?2(tm* tp) time_t  //将分段时间值转换为日历时间值
asctime?2(const tm* tblock) char*  //转换日期和时间为ASCII码
ctime?2(const time_t* time) char*  //把日期和时间转换为字符串
gmtime?2(const time_t* timer) tm*  //把日期和时间转换为格林尼治标准时间
localtime?2(const time_t* timer) tm*  //把日期和时间转变为结构
strftime?2(char* s,size_t smax,const char* fmt, const tm* tp) size_t  //根据 fmt 的格式 要求将* tp中的日期与时间转换为指定格式
bcmp?2(const void* s1, const void* s2, int n) int  //比较字符串s1和s2的前n个字节是否相等
bcopy?2(const void* src, void* dest, int n) void  //将字符串src的前n个字节复制到dest中
bzero?2(void* s, int n) void  //置字节字符串s的前n个字节为零
memccpy?2(void* dest, void* src, unsigned char ch, unsigned int count) void*  //由src所指内存区域复制不多于count个字节到dest所指内存区域，如果遇到字符ch则停止复制
memcpy?2(void* dest, void* src, unsigned int count) void*  //由src所指内存区域复制count个字节到dest所指内存区域
memchr?2(void* buf, char ch, unsigned count) void*  //从buf所指内存区域的前count个字节查找字符ch
memcmp?2(void* buf1, void* buf2, unsigned int count) int  //比较内存区域buf1和buf2的前count个字节
memicmp?2(void* buf1, void* buf2, unsigned int count) int  //比较内存区域buf1和buf2的前count个字节但不区分字母的大小写
memmove?2(void* dest, const void* src, unsigned int count) void*  //由src所指内存区域复制count个字节到dest所指内存区域
memset?2(void* buffer, int c, int count) void*  //把buffer所指内存区域的前count个字节设置成字符c
setmem?2(void* buf, unsigned int count, char ch) void  //把buf所指内存区域前count个字节设置成字符ch
movmem?2(void* src, void* dest, unsigned int count) void  //由src所指内存区域复制count个字节到dest所指内存区域
stpcpy?2(char* dest,char* src) char*  //把src所指由NULL结束的字符串复制到dest所指的数组中
strcpy?2(char* dest,char* src) char*  //把src所指由NULL结束的字符串复制到dest所指的数组中
strcat?2(char* dest,char* src) char*  //把src所指字符串添加到dest结尾处(覆盖dest结尾处的’\0’)并添加’\0’
strchr?2(char* s,char c) char*  //查找字符串s中首次出现字符c的位置
strcmp?2(char* s1,char*  s2) int  //比较字符串s1和s2
stricmp?2(char* s1,char*  s2) int  //比较字符串s1和s2，但不区分字母的大小写
stricmp?2(char* s1,char*  s2) int  //比较字符串s1和s2，但不区分字母的大小写
strcspn?2(char* s1,char* s2) int  //在字符串s1中搜寻s2中所出现的字符
strdup?2(char* s) char*  //复制字符串s
strlen?2(char* s) int  //计算字符串s的长度
strlwr?2(char* s) char*  //将字符串s转换为小写形式
strupr?2(char* s) char*  //将字符串s转换为大写形式
strncat?2(char* dest,char* src,int n) char*  //把src所指字符串的前n个字符添加到dest结尾处(覆盖dest结尾处的’\0’)并添加’\0’
strcmp?2(char* s1,char*  s2，int n) int  //比较字符串s1和s2的前n个字符
strnicmp?2(char* s1,char*  s2，int n) int  //比较字符串s1和s2的前n个字符但不区分大小写
strncpy?2(char* dest, char* src, int n) char*  //把src所指由NULL结束的字符串的前n个字节复制到dest所指的数组中
strpbrk?2(char* s1, char* s2) char*  //在字符串s1中寻找字符串s2中任何一个字符相匹配的第一个字符的位置，空字符NULL不包括在内
strrev?2(char* s) char*  //把字符串s的所有字符的顺序颠倒过来（不包括空字符NULL）
strset?2(char* s, char c) char*  //把字符串s中的所有字符都设置成字符c
strstr?2(char* haystack, char* needle) char*  //从字符串haystack中寻找needle第一次出现的位置（不比较结束符NULL)
strtok?2(char* s, char* delim) char*  //分解字符串为一组标记串。s为要分解的字符串，delim为分隔符字符串